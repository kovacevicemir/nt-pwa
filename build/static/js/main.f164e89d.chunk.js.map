{"version":3,"sources":["logo.svg","components/AllRoomsStatus.js","components/RoomPicker.js","components/RoomDetails.js","App.js","serviceWorkerRegistration.js","reportWebVitals.js","index.js"],"names":["useStyles","makeStyles","theme","root","display","flexDirection","justifyContent","alignItems","padding","margin","AllRoomsStatus","classes","className","Typography","variant","style","color","end","duration","marginTop","gridSize","maxWidth","RoomPicker","history","useHistory","onRoomClickHandler","roomId","push","Grid","container","spacing","columnSpacing","xs","sm","md","item","Button","onClick","size","textFieldClass","width","RoomDetails","params","useParams","Paper","elevation","id","TextField","label","defaultValue","InputProps","readOnly","App","exact","path","render","props","Boolean","window","location","hostname","match","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.f164e89d.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.103b5fa1.svg\";","import { Typography } from \"@material-ui/core\";\r\nimport React from \"react\";\r\nimport CountUp from \"react-countup\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    display: \"flex\",\r\n    flexDirection: \"row\",\r\n    justifyContent: \"space-around\",\r\n    alignItems: \"center\",\r\n    padding: \"3%\",\r\n    margin: \"2%\",\r\n  },\r\n}));\r\n\r\nconst AllRoomsStatus = () => {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <Typography variant=\"h6\">\r\n        Available <CountUp style={{color:\"green\"}} end={11} duration={1} />\r\n      </Typography>\r\n      <Typography variant=\"h6\">\r\n        Occupied <CountUp style={{color:\"red\"}} end={44} duration={1} />\r\n      </Typography>\r\n      <Typography variant=\"h6\">\r\n        Reserved <CountUp style={{color:\"orange\"}} end={27} duration={1} />\r\n      </Typography>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AllRoomsStatus;\r\n","import { Button, Typography } from \"@material-ui/core\";\r\nimport React from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { Grid } from \"@material-ui/core\";\r\nimport { useHistory } from \"react-router\";\r\nimport AllRoomsStatus from \"./AllRoomsStatus\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    display: \"flex\",\r\n    marginTop: \"5%\",\r\n    justifyContent:\"center\"\r\n  },\r\n  gridSize:{\r\n    maxWidth:\"1000px\"\r\n  }\r\n}));\r\n\r\nconst RoomPicker = () => {\r\n  const classes = useStyles();\r\n  const history = useHistory();\r\n\r\n  const onRoomClickHandler = (roomId) => {\r\n    history.push(`/room-details/${roomId}`);\r\n  };\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <Grid className={classes.gridSize} container spacing={3} columnSpacing={{ xs: 1, sm: 2, md: 3 }}>\r\n        <Grid item xs={12}>\r\n          <Typography variant=\"h3\">Hospital Map</Typography>\r\n          <br />\r\n        </Grid>\r\n          <Grid item xs={12} md={4}>\r\n            <Button\r\n              onClick={() => onRoomClickHandler(1)}\r\n              size=\"large\"\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n            >\r\n              Room 1\r\n            </Button>\r\n          </Grid>\r\n          <Grid item xs={12} md={4}>\r\n            <Button\r\n              onClick={() => onRoomClickHandler(2)}\r\n              size=\"large\"\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n            >\r\n              Room 2\r\n            </Button>\r\n          </Grid>\r\n          <Grid item xs={12} md={4}>\r\n            <Button\r\n              onClick={() => onRoomClickHandler(3)}\r\n              size=\"large\"\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n            >\r\n              Room 3\r\n            </Button>\r\n          </Grid>\r\n          <Grid item xs={12} md={4}>\r\n            <Button\r\n              onClick={() => onRoomClickHandler(4)}\r\n              size=\"large\"\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n            >\r\n              Room 4\r\n            </Button>\r\n          </Grid>\r\n          <Grid item xs={12} md={4}>\r\n            <Button\r\n              onClick={() => onRoomClickHandler(5)}\r\n              size=\"large\"\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n            >\r\n              Room 5\r\n            </Button>\r\n          </Grid>\r\n          <Grid item xs={12} md={4}>\r\n            <Button\r\n              onClick={() => onRoomClickHandler(6)}\r\n              size=\"large\"\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n            >\r\n              Room 6\r\n            </Button>\r\n          </Grid>\r\n          <Grid item xs={12}>\r\n            <AllRoomsStatus />\r\n          </Grid>\r\n      </Grid>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default RoomPicker;\r\n","import { Paper, TextField, Typography } from \"@material-ui/core\";\r\nimport React from \"react\";\r\nimport { useParams } from \"react-router\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    justifyContent: \"center\",\r\n    alignItems: \"center\",\r\n    padding: \"3%\",\r\n    margin:\"2%\"\r\n  },\r\n  textFieldClass: {\r\n    marginTop: \"15px\",\r\n    width: \"380px\",\r\n  },\r\n}));\r\n\r\nconst RoomDetails = () => {\r\n  let params = useParams();\r\n  const classes = useStyles();\r\n  return (\r\n    <Paper elevation={3} className={classes.root}>\r\n      <Typography variant=\"h4\">Room {params.id}#</Typography>\r\n      <br />\r\n      <TextField\r\n        className={classes.textFieldClass}\r\n        id=\"filled-read-only-input\"\r\n        label=\"Read Only\"\r\n        defaultValue=\"Hello Worldddddddddddddd\"\r\n        InputProps={{\r\n          readOnly: true,\r\n        }}\r\n        variant=\"outlined\"\r\n      />\r\n      <TextField\r\n        className={classes.textFieldClass}\r\n        id=\"filled-read-only-input\"\r\n        label=\"Read Only\"\r\n        defaultValue=\"Hello World\"\r\n        InputProps={{\r\n          readOnly: true,\r\n        }}\r\n        variant=\"outlined\"\r\n      />\r\n      <TextField\r\n        className={classes.textFieldClass}\r\n        id=\"filled-read-only-input\"\r\n        label=\"Read Only\"\r\n        defaultValue=\"Hello World\"\r\n        InputProps={{\r\n          readOnly: true,\r\n        }}\r\n        variant=\"outlined\"\r\n      />\r\n      <TextField\r\n        className={classes.textFieldClass}\r\n        id=\"filled-read-only-input\"\r\n        label=\"Read Only\"\r\n        defaultValue=\"Hello World\"\r\n        InputProps={{\r\n          readOnly: true,\r\n        }}\r\n        variant=\"outlined\"\r\n      />\r\n\r\n    </Paper>\r\n  );\r\n};\r\n\r\nexport default RoomDetails;\r\n","import React from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport RoomPicker from \"./components/RoomPicker\";\nimport { BrowserRouter, Route, Switch } from \"react-router-dom\";\nimport RoomDetails from \"./components/RoomDetails\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <BrowserRouter>\n        <Switch>\n          <Route exact path=\"/\" render={(props) => <RoomPicker />} />\n          <Route\n            exact\n            path=\"/room-details/:id\"\n            render={(props) => <RoomDetails />}\n          />\n        </Switch>\n      </BrowserRouter>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.unregister();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}